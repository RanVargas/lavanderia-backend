To implement a login and registration mechanism that generates a JWT token upon successful login or registration, we'll need to update the `/login` endpoint to handle user authentication, and add a `/register` endpoint to handle new user registrations.

Here's how to set up both the login and registration functionalities using Gin in Go:

### Model Adjustments

First, ensure your user model (assuming `model/user.go`) supports authentication, typically by including a password field and possibly methods for password hashing and verification.

```go
package model

import (
    "gorm.io/gorm"
    "golang.org/x/crypto/bcrypt"
)

type User struct {
    gorm.Model
    Name     string
    Email    string `gorm:"uniqueIndex"`
    Password string
}

// HashPassword encrypts the user's password
func (u *User) HashPassword(password string) error {
    bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
    if err != nil {
        return err
    }
    u.Password = string(bytes)
    return nil
}

// CheckPassword verifies the password against the hashed password in the database
func (u *User) CheckPassword(password string) bool {
    err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(password))
    return err == nil
}
```

### Repository Adjustments

Add methods in your user repository (`repository/user_repository.go`) for creating a user and fetching a user by email, which are necessary for registration and login, respectively.

```go
package repository

import (
    "myapp/model"
    "gorm.io/gorm"
)

type UserRepository struct {
    db *gorm.DB
}

func NewUserRepository(db *gorm.DB) *UserRepository {
    return &UserRepository{db}
}

func (repo *UserRepository) CreateUser(user *model.User) error {
    return repo.db.Create(user).Error
}

func (repo *UserRepository) GetUserByEmail(email string) (model.User, error) {
    var user model.User
    result := repo.db.Where("email = ?", email).First(&user)
    return user, result.Error
}
```

### API Handlers

Update your API handlers to include methods for both logging in and registering users.

- **Registration Handler** (`api/handler.go`):
```go
package api

import (
    "net/http"
    "myapp/model"
    "myapp/repository"
    "github.com/gin-gonic/gin"
)

// RegisterUser handles the user registration
func RegisterUser(c *gin.Context, repo *repository.UserRepository) {
    var user model.User
    if err := c.ShouldBindJSON(&user); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
        return
    }

    // Hash the password
    if err := user.HashPassword(user.Password); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not hash password"})
        return
    }

    // Create the user
    if err := repo.CreateUser(&user); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not create user"})
        return
    }

    c.JSON(http.StatusOK, gin.H{"message": "User registered successfully"})
}

// LoginUser handles the user login
func LoginUser(c *gin.Context, repo *repository.UserRepository) {
    var loginDetails struct {
        Email    string `json:"email"`
        Password string `json:"password"`
    }
    if err := c.ShouldBindJSON(&loginDetails); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
        return
    }

    user, err := repo.GetUserByEmail(loginDetails.Email)
    if err != nil {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Login failed"})
        return
    }

    if !user.CheckPassword(loginDetails.Password) {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Login failed"})
        return
    }

    token, err := auth.GenerateToken(user.Email)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not generate token"})
        return
    }

    c.JSON(http.StatusOK, gin.H{"token": token})
}
```

### Setup Routes in Main Application

Finally, set up the routes in your `main.go` to include these new handlers, ensuring that you correctly initialize and pass the repository instances.

```go
package main

import (
    "log"
    "myapp/api"
    "myapp/config"
    "myapp/repository"

    "github.com/gin-gonic/gin"
)

func main() {
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatalf("Failed to load configuration: %v", err)
    }

    db, err := repository.NewDB(cfg)
    if err != nil {
        log.Fatalf("Failed to connect to database: %v", err)
    }



    userRepo := repository.NewUserRepository(db)

    r := gin.Default()
    
    r.POST("/login", func(c *gin.Context) {
        api.LoginUser(c, userRepo)
    })
    r.POST("/register", func(c *gin.Context) {
        api.RegisterUser(c, userRepo)
    })

    r.Run() // Start the server
}
```

This comprehensive setup allows users to register and log in, with the system providing a JWT upon successful login, which they can use to authenticate subsequent requests.












Sure! Here's an example that includes basic usage of the Radix UI components you mentioned. We'll create a simple web page using React that incorporates an accordion, an alert dialog, a menubar with labels, a progress bar, a slot for flexible component composition, and a toast notification. This example assumes you have a React project setup with support for JSX.

### Step 1: Install the necessary packages

First, install the Radix UI components:

```bash
npm install @radix-ui/react-accordion @radix-ui/react-alert-dialog @radix-ui/react-label @radix-ui/react-menubar @radix-ui/react-progress @radix-ui/react-slot @radix-ui/react-toast
```

### Step 2: Create the components in your React app

Here is how you can incorporate these components into a functional React component.

```jsx
import React, { useState } from 'react';
import * as Accordion from '@radix-ui/react-accordion';
import * as AlertDialog from '@radix-ui/react-alert-dialog';
import { Label } from '@radix-ui/react-label';
import * as Menubar from '@radix-ui/react-menubar';
import { Progress } from '@radix-ui/react-progress';
import { Slot } from '@radix-ui/react-slot';
import * as Toast from '@radix-ui/react-toast';

function App() {
  const [isOpen, setIsOpen] = useState(false);
  const [progress, setProgress] = useState(70);
  const [showToast, setShowToast] = useState(false);

  return (
    <div>
      {/* Accordion Example */}
      <Accordion.Root type="single" collapsible>
        <Accordion.Item value="item-1">
          <Accordion.Header>
            <Accordion.Trigger>Section 1</Accordion.Trigger>
          </Accordion.Header>
          <Accordion.Content>This is the content of the accordion.</Accordion.Content>
        </Accordion.Item>
      </Accordion.Root>

      {/* Alert Dialog Example */}
      <AlertDialog.Root>
        <AlertDialog.Trigger onClick={() => setIsOpen(true)}>Open Dialog</AlertDialog.Trigger>
        <AlertDialog.Portal>
          <AlertDialog.Overlay className="overlay"/>
          <AlertDialog.Content>
            <AlertDialog.Title>Warning</AlertDialog.Title>
            <AlertDialog.Description>This action is irreversible.</AlertDialog.Description>
            <AlertDialog.Cancel onClick={() => setIsOpen(false)}>Cancel</AlertDialog.Cancel>
            <AlertDialog.Action onClick={() => setIsOpen(false)}>Proceed</AlertDialog.Action>
          </AlertDialog.Content>
        </AlertDialog.Portal>
      </AlertDialog.Root>

      {/* Menubar Example */}
      <Menubar.Root>
        <Menubar.Item onSelect={() => console.log("File selected")}>File</Menubar.Item>
        <Menubar.Item onSelect={() => console.log("Edit selected")}>Edit</Menubar.Item>
        <Menubar.Item onSelect={() => console.log("View selected")}>View</Menubar.Item>
      </Menubar.Root>

      {/* Progress Example */}
      <Progress value={progress} max={100} />

      {/* Toast Example */}
      <button onClick={() => setShowToast(true)}>Show Toast</button>
      <Toast.Provider swipeDirection="right">
        {showToast && (
          <Toast.Root onClose={() => setShowToast(false)}>
            <Toast.Description>This is a toast message!</Toast.Description>
            <Toast.Action asChild altText="Close">
              <button onClick={() => setShowToast(false)}>X</button>
            </Toast.Action>
          </Toast.Root>
        )}
      </Toast.Provider>

      {/* Label and Slot Example */}
      <Label htmlFor="my-input">My Label:</Label>
      <Slot>
        <input id="my-input" placeholder="Type here..." />
      </Slot>
    </div>
  );
}

export default App;
```

### Step 3: Add basic styling (if needed)

Add some minimal CSS for better visibility:

```css
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
}
```

### Explanation
- **Accordion**: Allows users to toggle visibility of sections.
- **Alert Dialog**: Modal dialog that can warn or inform users before taking an action.
- **Menubar**: Provides a horizontal menu typically used for application options.
- **Progress**: Visually represents the progress of an operation.
- **Toast**: Used for transient messages about the app status.
- **Label and Slot**: `Label` provides accessible labels for inputs, and `Slot` allows for flexible composition of components.

This setup should help you integrate various Radix UI components into a functional React application. Adjust and customize according to your project's needs!